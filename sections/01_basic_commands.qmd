---
title: "Basic Commands"
format:
  html: 
    toc: true
    section-divs: true
    include-after-body: ../js/webex.js
engine: knitr
filters:
  - webr
webr:
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
library(knitr)

source(here::here("R", "helpers.R"))

opts_chunk$set(message = FALSE,
               warning = FALSE,
               fig.align = "center",
               fig.path = "_fig/1_basic_commands-",
               cache.path = "_cache/1_basic_commands-")
```

## Comments

The comment character in R is `#`. Each commented line must be preceded by a `#` symbol. There are no block comments in
R. Comments are not evaluated when you run your code

Run the following R code to generate a vector of 10 numbers and print the result.

```{webr-r}
1:10
```

In the following code, the expression `1:10` is "commented out", so R doesn't evaluate that line, and we get no output.

```{webr-r}
#1:10
```

:::::: {.pr-chunk}

## Assignment

To do anything useful, we need to create objects that hold data. We 'assign' values to objects via the 'assignment'
operator, `<-`.

The following code assigns the values `7`, `2.5`, and `"foo"` to the objects `x`, `y`, and `z`, respectively.

```{r}
x <- 7
y <- 2.5
z <- "foo"
```

Notice the lack of printed output. These three commands create three new objects in your environment (`x`, `y`, `z`)
that store the assigned data values (`7`, `2.5`, `"foo"`). However, we haven't yet asked R to do anything with those
stored values, so we don't see any printed output.

To view the contents of an object, we can evaluate the object's name without assignment.

Run the following code to print the values saved as `x` and `y`.

```{webr-r}
x
y
```

We can also create new objects by assigning them the values of existing objects.

The following code creates a new object, `w`, that takes the value of the existing object `z`. When we print the value
of `w`, you can see that it has the same value as `z`.

```{r}
w <- z
w
z
```

When we create `w` above, we are not replacing `z` with `w`: we're making a copy of `z` and calling that copy `w`. So, 
both `w` and `z` are still available. In almost all cases, R will copy objects during assignment. This behavior is good
to keep in mind when you're working with larger datasets: you can quickly flood your memory with unnecessary copies of 
your data, if you're not careful.

::::::

:::::: {.pr-chunk}

## Mathematical Operators

All of the familiar arithmetic operators are available in R. When we do arithmetic on named R objects, the values stored
in those objects are used to evaluate the expression.

The following code will add, subtract, multiply, and divide the values stored as `y` and `x`.

```{r}
y + x
y - x
y * x
y / x
```

We use the carret character, `^`, to specify exponents.

The following code will square and cube the value of `y`.

```{r}
y^2
y^3
```

The `sqrt()` function returns the square root of it's argument (i.e., the value we specify inside the parantheses).

The following code calculates the square root of `y`.

```{r}
sqrt(y)
```

For other roots, we can use fractional exponents.

```{r}
y^(1/3) # cube root of y
y^(1/4) # quartic root of y
```

R also includes many special functions for the most common mathematical operations.

```{r}
log(y)   # natural logarithm of y
log10(y) # log base 10 of y
log2(y)  # log base 2 of y

exp(x) # exponentiate x

y %% x # modulo: remainder after dividing y by x

foo <- -3.14159

round(foo, 3) # round 'foo' to 3 decimal places
floor(foo)    # round 'foo' down to the nearest whole number
ceiling(foo)  # round 'foo' up to the nearest whole number

abs(foo) # absolute value of 'foo'
```

Note that `log(y)` calculates the *natural logarithm* of `y`, $\ln(y)$. If you want the "ordinary" base-10 log, you need
to use the `log10()` function.

<!--------------------------------------------------------------------------------------------------------------------->

::: practice

## Practice

1. Create an object called `age` that takes the value of your age in whole years.
1. Use the `age` object you created in above to create a second object called `weeks` that takes the value of your age
in whole weeks.
   - Assume 52 weeks in each year.
   - Disregard partial years (i.e., assume every year counted in `age` contains 52 whole weeks).

:::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive Editor

```{webr-r}
```

## {{< fa circle-check >}}&ensp;Solution

At time-of-writing, I'm 38 years old. So, these would be my `age` and `weeks` objects.

```{r}
age   <- 38
weeks <- 38 * 52
```
::::

:::

<!--------------------------------------------------------------------------------------------------------------------->

::::::

:::::: {.pr-chunk}

## Logical Comparisons

We can tests many flavors of logical conditions in R. Logical tests return a logical vector as the result. A logical
vector takes the value of `TRUE` whenever the tested condition is satisified and `FALSE` when the tested condition is
not satisfied.

The simplest logical test is an equality check. To check if two objects are equal, we use the 'equality operator', `==`.

```{r}
## Define some objects to play with
y <- 5
x <- 7
w <- 5

### Check equality
y == x
y == w
```

We can also check the usual greater-than/less-than conditions with `>`, `<`, `>=`, `<=`.

```{r}
y > x  # greater than
y >= x # greater than or equal to
y < x  # less than
y <= x # less than or equal to
```

<!--------------------------------------------------------------------------------------------------------------------->

::: practice

## Practice

What values will the following four expressions return?

:::: {.panel-tabset}
## {{< fa circle-question >}}&ensp;Question

```{r, eval = FALSE}
y > w
y >= w
y < w
y <= w
```

## {{< fa circle-check >}}&ensp;Solution

```{r}
y > w
y >= w
y < w
y <= w
```
::::

:::

<!--------------------------------------------------------------------------------------------------------------------->

We can negate any logical condition by prepending the '!' character

```{r}
y > x
!y > x

y == w
!y == w
```

Rather than negating an equality check, we will typically use the special "not-equal" operator, `!=`.

```{r}
y == w
y != w
```

We can create more complex logical conditions with the AND and OR operators: `&` and `|`.

```{r}
y == w & y < x
y == w & y > x
y == w | y > x
```

<!--------------------------------------------------------------------------------------------------------------------->

::: practice

## Practice

Use a single line of code to generate a logical value (i.e., TRUE/FALSE) indicating if the value of the 'weeks' object
you created above is evenly divisible by 7.

- *Hint:* Use `x %% 7` to calculate the remainder after dividing `x` by `7`.

:::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive Editor

```{webr-r}
```

## {{< fa circle-check >}}&ensp;Solution

```{r}
(6 %% 7) == 0
```

If the remainder of dividing `weeks` by 7 is zero, we know that the value of `weeks` is evenly divisible by 7.
::::

:::

<!--------------------------------------------------------------------------------------------------------------------->

::::::

:::::: {.pr-chunk}

## Order of Operations

When parsing your commands, R will, mostly, scan each line of code from left to right and apply each mathematical
operation according to the usual PEMDAS ordering.

Notice how the following two expressions produce different results.

- In the first line, we first divide `x` by `w` and then add `y` to the result.
- In the second line, we first add `x` to `y` and then divide the result by `w`.

```{r}
y + x / w
(y + x) / w
```

<!--------------------------------------------------------------------------------------------------------------------->

::: practice

## Practice

Why do the following two expressions produce different answers?

:::: {.panel-tabset}
## {{< fa circle-question >}}&ensp;Question

```{r}
y^(1/2)
y^1/2
```

## {{< fa circle-check >}}&ensp;Solution

```{r}
y^(1/2) == sqrt(y)
y^1/2 == y/2
```

- In the first case, we're raising `y` to the power of $\frac{1}{2}$.
- In the second case, we're first raising `y` to the power of 1 (which does nothing) and then dividing the result by 2.
::::

:::

<!--------------------------------------------------------------------------------------------------------------------->

::::::

:::::: {.pr-chunk}

## Interacting with the Environment

The 'environment' is a loosely organized set of all the objects that R currently has stored in working memory.

We can use the `ls()` function to list the contents of the current environment.

```{r}
ls()
```

The `rm()` function will remove an object from the environment.

The following code will remove `x` from the environment.

```{r}
rm(x) # Remove 'x' from the environment
ls()  # Check the results
```

<!--------------------------------------------------------------------------------------------------------------------->

::: practice

## Practice

Use the `rm()` function to remove the `age` object that you created above from your environment, and use `ls()` to check
your work.

:::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive Editor

```{webr-r}
```

## {{< fa circle-check >}}&ensp;Solution

```{r}
rm(age)
ls()
```
::::

:::

<!--------------------------------------------------------------------------------------------------------------------->

::::::

```{r quiz1}
#| echo: FALSE
#| results: "asis"

exams2forms::exams2forms(
  file = "assignment.Rmd",
  edir = here::here("quizzes", "questions")
)
```

```{r}
#| echo: false
#| results: asis
create_buttons("02_packages.html")
```
