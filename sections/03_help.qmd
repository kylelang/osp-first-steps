---
title: "Getting Help"
format:
  html: 
    toc: true
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>
          <script src="/js/bootstrapify.js"></script>
engine: knitr
filters:
  - webr
webr:
  packages: ['dplyr']
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
library(knitr)

source(here::here("R", "helpers.R"))

## Define an asis engine that will evaluate inline code within an asis block:
knit_engines$set(asis = function(options) {
  if(options$echo && options$eval) knit_child(text = options$code)
}
)

opts_chunk$set(eval = FALSE,
               message = FALSE,
               warning = FALSE,
               fig.align = "center",
               fig.path = "_figures/3_help-",
               cache.path = "_cache/3_help-")
```

Every R function provided by a Core R package or an add-on package distributed through CRAN must come with documentation
(AKA, a help file). This documentation always follows the same general structure. Below, you see the documentation for 
the `if_else()` function from the **dplyr** package.

```{=html}

{{< include /assets/docs/if_else.html >}}

```

## Help File Sections

Not all R help files include all possible sections. The most common and useful are shown in the example above.

Description 
: A brief description of the function.

Usage
: Shows how to call the function

- The functions name
- The name of all the function arguments
- The order of the function arguments
- Any default values defined for function arguments

Arguments
: Briefly explains each function argument

Details
: Provides additional details of function arguments or the functions behavior

Value
: Describes the object returned by the function

Examples
: Executible R code demonstrating the functions use

:::::: {.pr-chunk}

## Accessing Help Files

The simplest way to access a function's help file is to prepend the function name (without parentheses) with the `?`
character. The following code will pull up the documentation for the `lm()` function.

```{r}
?lm
```

You can achieve the same effect by providing the function name to the `help()` function.

```{r}
help(lm)
help("lm")
```

A function's help file is provided by the package that provides the function. So, you cannot access the help file for
functions provided by unloaded packages.

The following code will produce an error because you haven't loaded the **dplyr** function that provides `arrange()`.

```{webr-r}
?arrange
```

We can still access the help files for functions provided by an unloaded package, though. We just have to tell R which
package provides the function. To do so, either use the *namespace resolution operator*, `::`, or provide a value for
the `package` argument in the `help()` function.

The following code should run without errors, because we've told R to search for the `arrange()` help file in the
**dplyr** package

```{webr-r}
?dplyr::arrange
help(arrange, package = "dplyr")
```

::: practice

## Practice

- Access the help file for the vector() function.
   - How many arguments does the vector() function take?
   - What is the default value of the `mode` argument?

:::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive Editor

```{webr-r}
```

## {{< fa circle-check >}}&ensp;Solution

```{r, eval = TRUE, echo = TRUE, include = TRUE}
?vector
```

- The `vector()` function takes 2 arguments: `mode` and `length`.
- The default argument for `mode` is "logical".

::::

:::

::::::

```{r}
#| eval: true
#| echo: false
#| results: asis
create_buttons("99_finish.html")
```
