## Add-On Packages

```{r, include = FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

When you install R, you're only installing the core set of functionality. You can already do quite a lot with this
baseline R installation (e.g., a complete linear regression analysis), but you will usually need functinality provided
by add-on *packages* to complete most real-world data analyses.

For example, the following list shows some common analyses for which you would typically use add-on packages (and some
suitable packages).

- Treating missing data using multiple imputation
   - [mice](https://cran.r-project.org/web/packages/mice/index.html)
   - [Amelia](https://cran.r-project.org/web/packages/Amelia/index.html)
   - [mi](https://cran.r-project.org/web/packages/mi/index.html)
- Structural equation modeling
  - [lavaan](https://cran.r-project.org/web/packages/lavaan/index.html)
  - [OpenMx](https://cran.r-project.org/web/packages/OpenMx/index.html)
- Multilevel regression modeling
   - [lme4](https://cran.r-project.org/web/packages/lme4/index.html)
   - [nlme](https://cran.r-project.org/web/packages/nlme/index.html)
- For all but the most trivial data processing, manipulation, and visualization, the [tidyverse](https://www.tidyverse.org/)
packages are virtually obligatory.

### Installing Packages

Fortunatelly, installing packages is very simple. In most cases, you only need to specify the name of the package that
you want to install in the `install.packages()` function. The following code will install the **psych** package.

```{r}
## Use the default CRAN mirror to install one package
install.packages("psych")
```

If you want to install more than one package, you simply using the concatenation function, `c()`, to define a character
vector giving the names of your desired packages, as shown in the following code.

```{r}
## Use the default CRAN mirror to install two packages
install.packages(c("mice", "lavaan"))
```

In the ordinary use-case, `install.packages()` will download the data needed to install a given package from the 
*Comprehensive R Archive Network* (CRAN). CRAN is a global network of servers (so-called CRAN mirrors) that each host a
complete copy of the database of the available R packages (as well as the Base R components).

Usually, you don't need to tell R which of these CRAN mirrors to use because RStudio defines a default mirror that gets
used whenever you call `install.pacakges()`. However, if you want to explicitly specify a different CRAN mirror, you can
do so via the `repos` argument.

```{r}
## Specify the CRAN mirror a priori
install.packages(c("lattice", "gridExtra"), repos = "http://cloud.r-project.org")
```

Similarly, you don't usually have to tell R where you want to install new packages. If your user doesn't have write 
permissions for the default library location, R will ask if you want to install the packages in a different location for
which you should have suitable permissions.

Sometimes, this automatic procedure fails (e.g., on employer-administered computers with strict security settings for
employees). In such cases---or anytime you want to explicitly define the package library location---you can define the
package library via the `lib` argument.

```{r}
## Specify a non-standard directory into which the packages will be installed
install.packages("mvtnorm", lib = "../software")
```

#### Practice

Use the `install.packages()` function to install the following packages in the default location (i.e., don't specify
anything for the `lib` argument).

- `ggplot2`
- `dplyr`
- `haven`

```{webr-r}
```

### Loading Packages

Once you've installed a new package, you're nearly ready to start using the functionality provided by that package, but
there's still one final step: you must *load* the package into your active R session.

If you run the following code, you will get an error because we're trying to using the `ggplot()`, `aes()`, and
`geom_boxplot()` functions that are provided by the **ggplot2** package, but we haven't yet loaded that package.

```{webr-r}
ggplot(iris, aes(Species, Petal.Length)) + geom_boxplot()
```

An R package is really just a small piece of software. Like any other software, you only need to install a given R 
package once (just like you only need to install RStudio once), but you'll need to load the package every time you want
to use it in a new R session (like you need to open RStudio every time you want to use it).

We load R packages with the `library()` function.

```{r}
library(dplyr)
```

The `library()` function can only load one package at a time, so you need to call `library()` multiple times to load 
multiple packages.

```{r}
library(mice)
library(lavaan)
```

Running the following code should produce a simple plot, because we've loaded the **ggplot2** package before trying to
use the functions it provides.

```{webr-r}
library(ggplot2)

ggplot(iris, aes(Species, Petal.Length)) + geom_boxplot()
```

## Getting Help

Every R function provided by a Core R package or an add-on package distributed through CRAN must come with documentation
(AKA, a help file). This documentation always follows the same general structure. Below, you see the documentation for 
the `if_else()` function from the **dplyr** package.

```{=html}

{{< include /if_else.html >}}

```

### Help File Sections

Not all R help files include all possible sections. The most common and useful are shown in the example above.

Description 
: A brief description of the function.

Usage
: Shows how to call the function

- The functions name
- The name of all the function arguments
- The order of the function arguments
- Any default values defined for function arguments

Arguments
: Briefly explains each function argument

Details
: Provides additional details of function arguments or the functions behavior

Value
: Describes the object returned by the function

Examples
: Executible R code demonstrating the functions use

### Accessing Help Files

The simplest way to access a function's help file is to prepend the function name (without parentheses) with the `?`
character. The following code will pull up the documentation for the `lm()` function.

```{r}
?lm
```

You can achieve the same effect by providing the function name to the `help()` function.

```{r}
help(lm)
help("lm")
```

A function's help file is provided by the package that provides the function. So, you cannot access the help file for
functions provided by unloaded packages.

The following code will produce an error because you haven't loaded the **dplyr** function that provides `arrange()`.

```{webr-r}
?arrange
```

We can still access the help files for functions provided by an unloaded package, though. We just have to tell R which
package provides the function. To do so, either use the *namespace resolution operator*, `::`, or provide a value for
the `package` argument in the `help()` function.

The following code should run without errors, because we've told R to search for the `arrange()` help file in the
**dplyr** package

```{webr-r}
?dplyr::arrange
help(arrange, package = "dplyr")
```

#### Practice

- Access the help file for the vector() function.
   - How many arguments does the vector() function take?
   - What is the default value of the `mode` argument?

```{webr-r}
```
