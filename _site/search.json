[
  {
    "objectID": "sections/2_packages_help.html",
    "href": "sections/2_packages_help.html",
    "title": "first_steps",
    "section": "",
    "text": "When you install R, you’re only installing the core set of functionality. You can already do quite a lot with this baseline R installation (e.g., a complete linear regression analysis), but you will usually need functinality provided by add-on packages to complete most real-world data analyses.\nFor example, the following list shows some common analyses for which you would typically use add-on packages (and some suitable packages).\n\nTreating missing data using multiple imputation\n\nmice\namelia\nmi\n\nStructural equation modeling\n\nlavaan\nopenmx\n\nMultilevel regression modeling\n\nlme4\n\nFor all but the most trivial data processing, manipulation, and visualization, the tidyverse packages are virtually obligatory.\n\n\n\nFortunatelly, installing packages is very simple. In most cases, you only need to specify the name of the package that you want to install in the install.packages() function. The following code will install the psych package.\n\n## Use the default CRAN mirror to install one package\ninstall.packages(\"psych\")\n\nIf you want to install more than one package, you simply using the concatenation function, c(), to define a character vector giving the names of your desired packages, as shown in the following code.\n\n## Use the default CRAN mirror to install two packages\ninstall.packages(c(\"mice\", \"lavaan\"))\n\nIn the ordinary use-case, install.packages() will download the data needed to install a given package from the Comprehensive R Archive Network (CRAN). CRAN is a global network of servers (so-called CRAN mirrors) that each host a complete copy of the database of the available R packages (as well as the Base R components).\nUsually, you don’t need to tell R which of these CRAN mirrors to use because RStudio defines a default mirror that gets used whenever you call install.pacakges(). However, if you want to explicitly specify a different CRAN mirror, you can do so via the repos argument.\n\n## Specify the CRAN mirror a priori\ninstall.packages(c(\"lattice\", \"gridExtra\"), repos = \"http://cloud.r-project.org\")\n\nSimilarly, you don’t usually have to tell R where you want to install new packages. If your user doesn’t have write permissions for the default library location, R will ask if you want to install the packages in a different location for which you should have suitable permissions.\nSometimes, this automatic procedure fails (e.g., on employer-administered computers with strict security settings for employees). In such cases—or anytime you want to explicitly define the package library location—you can define the package library via the lib argument.\n\n## Specify a non-standard directory into which the packages will be installed\ninstall.packages(\"mvtnorm\", lib = \"../software\")\n\n\n\nUse the install.packages() function to install the following packages in the default location (i.e., don’t specify anything for the ‘lib’ argument).\n\nggplot2\ndplyr\nhaven\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nOnce you’ve installed a new package, you’re nearly ready to start using the functionality provided by that package, but there’s still one final step: you must load the package into your active R session.\nIf you run the following code, you will get an error because we’re trying to using the ggplot(), aes(), and geom_bar() functions that are provided by the ggplot2 package, but we haven’t yet loaded that package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAn R package is really just a small piece of software. Like any other software, you only need to install a given R package once (just like you only need to install RStudio once), but you’ll need to load the package every time you want to use it in a new R session (like you need to open RStudio every time you want to use it).\nWe load R packages with the library() function.\n\nlibrary(dplyr)\n\nThe library() function can only load one package at a time, so you need to call library() multiple times to load multiple packages.\n\nlibrary(mice)\nlibrary(lavaan)\n\nRunning the following code should produce a simple plot, because we’ve loaded the ggplot2 package before trying to use the functions it provides.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/2_packages_help.html#add-on-packages",
    "href": "sections/2_packages_help.html#add-on-packages",
    "title": "first_steps",
    "section": "",
    "text": "When you install R, you’re only installing the core set of functionality. You can already do quite a lot with this baseline R installation (e.g., a complete linear regression analysis), but you will usually need functinality provided by add-on packages to complete most real-world data analyses.\nFor example, the following list shows some common analyses for which you would typically use add-on packages (and some suitable packages).\n\nTreating missing data using multiple imputation\n\nmice\namelia\nmi\n\nStructural equation modeling\n\nlavaan\nopenmx\n\nMultilevel regression modeling\n\nlme4\n\nFor all but the most trivial data processing, manipulation, and visualization, the tidyverse packages are virtually obligatory.\n\n\n\nFortunatelly, installing packages is very simple. In most cases, you only need to specify the name of the package that you want to install in the install.packages() function. The following code will install the psych package.\n\n## Use the default CRAN mirror to install one package\ninstall.packages(\"psych\")\n\nIf you want to install more than one package, you simply using the concatenation function, c(), to define a character vector giving the names of your desired packages, as shown in the following code.\n\n## Use the default CRAN mirror to install two packages\ninstall.packages(c(\"mice\", \"lavaan\"))\n\nIn the ordinary use-case, install.packages() will download the data needed to install a given package from the Comprehensive R Archive Network (CRAN). CRAN is a global network of servers (so-called CRAN mirrors) that each host a complete copy of the database of the available R packages (as well as the Base R components).\nUsually, you don’t need to tell R which of these CRAN mirrors to use because RStudio defines a default mirror that gets used whenever you call install.pacakges(). However, if you want to explicitly specify a different CRAN mirror, you can do so via the repos argument.\n\n## Specify the CRAN mirror a priori\ninstall.packages(c(\"lattice\", \"gridExtra\"), repos = \"http://cloud.r-project.org\")\n\nSimilarly, you don’t usually have to tell R where you want to install new packages. If your user doesn’t have write permissions for the default library location, R will ask if you want to install the packages in a different location for which you should have suitable permissions.\nSometimes, this automatic procedure fails (e.g., on employer-administered computers with strict security settings for employees). In such cases—or anytime you want to explicitly define the package library location—you can define the package library via the lib argument.\n\n## Specify a non-standard directory into which the packages will be installed\ninstall.packages(\"mvtnorm\", lib = \"../software\")\n\n\n\nUse the install.packages() function to install the following packages in the default location (i.e., don’t specify anything for the ‘lib’ argument).\n\nggplot2\ndplyr\nhaven\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nOnce you’ve installed a new package, you’re nearly ready to start using the functionality provided by that package, but there’s still one final step: you must load the package into your active R session.\nIf you run the following code, you will get an error because we’re trying to using the ggplot(), aes(), and geom_bar() functions that are provided by the ggplot2 package, but we haven’t yet loaded that package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAn R package is really just a small piece of software. Like any other software, you only need to install a given R package once (just like you only need to install RStudio once), but you’ll need to load the package every time you want to use it in a new R session (like you need to open RStudio every time you want to use it).\nWe load R packages with the library() function.\n\nlibrary(dplyr)\n\nThe library() function can only load one package at a time, so you need to call library() multiple times to load multiple packages.\n\nlibrary(mice)\nlibrary(lavaan)\n\nRunning the following code should produce a simple plot, because we’ve loaded the ggplot2 package before trying to use the functions it provides.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/2_packages_help.html#practice",
    "href": "sections/2_packages_help.html#practice",
    "title": "first_steps",
    "section": "Practice",
    "text": "Practice\nUse the install.packages() function to install the following packages in the default location (i.e., don’t specify anything for the ‘lib’ argument).\n\nggplot2\ndplyr\nhaven\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLoading Packages\nYou only need to install a given package once."
  },
  {
    "objectID": "sections/2_packages_help.html#getting-help",
    "href": "sections/2_packages_help.html#getting-help",
    "title": "first_steps",
    "section": "Getting Help",
    "text": "Getting Help\nEvery R function provided by a Core R package or an add-on package distributed through CRAN must come with documentation (AKA, a help file). This documentation always follows the same general structure. Below, you see the documentation for the if_else() function from the dplyr package.\n\n\n\n  \n    R: Vectorised if-else\n    \n    \n    \n    \n    \n    \n  \n\n  \n    \n      \n\n        \n\n\n\nif_else {dplyr}\nR Documentation\n\n\n\n\n\n        Vectorised if-else\n\n        Description\n\n        \n          if_else() is a vectorized if-else. Compared to the base R equivalent,\n          ifelse(), this function allows you to handle missing values in the\n          condition with missing and always takes true, false, and\n          missing into account when determining what the output type should be.\n        \n\n        Usage\n\n        if_else(condition, true, false, missing = NULL, ..., ptype = NULL, size = NULL)\n\n        Arguments\n\n        \n\n\n\n\n\n\n\ncondition\nA logical vector\n\n\ntrue, false\nVectors to use for TRUE and FALSE values of condition.\nBoth true and false will be recycled to the size of condition.\ntrue, false, and missing (if used) will be cast to their common type.\n\n\nmissing\nIf not NULL, will be used as the value for NA values of condition. Follows the same size and type rules as true and false.\n\n\n...\nThese dots are for future extensions and must be empty.\n\n\nptype\nAn optional prototype declaring the desired output type. If supplied, this overrides the common type of true, false, and missing.\n\n\nsize\nAn optional size declaring the desired output size. If supplied, this overrides the size of condition.\n\n\n\n\n\n        Value\n\n        \n          A vector with the same size as condition and the same type as the common type of true,\n          false, and missing.\n        \n        \n          Where condition is TRUE, the matching values from true, where it is\n          FALSE, the matching values from false, and where it is NA, the matching\n          values from missing, if provided, otherwise a missing value will be used.\n        \n\n        Examples\n\n        x &lt;- c(-5:5, NA)\nif_else(x &lt; 0, NA, x)\n\n# Explicitly handle `NA` values in the `condition` with `missing`\nif_else(x &lt; 0, \"negative\", \"positive\", missing = \"missing\")\n\n# Unlike `ifelse()`, `if_else()` preserves types\nx &lt;- factor(sample(letters[1:5], 10, replace = TRUE))\nifelse(x %in% c(\"a\", \"b\", \"c\"), x, NA)\nif_else(x %in% c(\"a\", \"b\", \"c\"), x, NA)\n\n# `if_else()` is often useful for creating new columns inside of `mutate()`\nstarwars %&gt;%\nmutate(category = if_else(height &lt; 100, \"short\", \"tall\"), .keep = \"used\")\n\n      \n    \n  \n\n\n\n\n\n## Prepending the '?' character will access the help file for a function\n?lm\n\n## We can also use the 'help' function\nhelp(lm)\nhelp(\"lm\")\n\n## Non-letter characters need to be quoted\n?/\nhelp(/)\n?\"/\"\nhelp(\"/\")\n\n## If a package is not loaded, we need to specify the namespace\n?quickpred\n?mice::quickpred\nhelp(quickpred, package = \"mice\")\n\n## We can also open an interactive web-based help page\nhelp.start()\n\n################################################################################\n## PRACTICE PROBLEM 1.5\n##\n##  (a) Access the help file for the vector() function.\n##  (b) How many arguments does the vector() function take?\n##\n################################################################################"
  },
  {
    "objectID": "sections/if_else_examples.html",
    "href": "sections/if_else_examples.html",
    "title": "first_steps",
    "section": "",
    "text": "x &lt;- c(-5:5, NA)\nif_else(x &lt; 0, NA, x)\n\n# Explicitly handle `NA` values in the `condition` with `missing`\nif_else(x &lt; 0, \"negative\", \"positive\", missing = \"missing\")\n\n# Unlike `ifelse()`, `if_else()` preserves types\nx &lt;- factor(sample(letters[1:5], 10, replace = TRUE))\nifelse(x %in% c(\"a\", \"b\", \"c\"), x, NA)\nif_else(x %in% c(\"a\", \"b\", \"c\"), x, NA)\n\n# `if_else()` is often useful for creating new columns inside of `mutate()`\nstarwars %&gt;%\n  mutate(category = if_else(height &lt; 100, \"short\", \"tall\"), .keep = \"used\")"
  },
  {
    "objectID": "sections/1_basic_commands.html",
    "href": "sections/1_basic_commands.html",
    "title": "Basic Commands",
    "section": "",
    "text": "The comment character in R is #. Each commented line must be preceded by a # symbol. There are no block comments in R. Comments are not evaluated when you run your code\nRun the following R code to generate a vector of 10 numbers and print the result.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the following code, the expression 1:10 is “commented out”, so R doesn’t evaluate that line.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#comments",
    "href": "sections/1_basic_commands.html#comments",
    "title": "Basic Commands",
    "section": "",
    "text": "The comment character in R is #. Each commented line must be preceded by a # symbol. There are no block comments in R. Comments are not evaluated when you run your code\nRun the following R code to generate a vector of 10 numbers and print the result.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the following code, the expression 1:10 is “commented out”, so R doesn’t evaluate that line.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#assignment",
    "href": "sections/1_basic_commands.html#assignment",
    "title": "Basic Commands",
    "section": "Assignment",
    "text": "Assignment\nTo do anything useful, we need to create objects that hold data. We ‘assign’ values to objects via the ‘assignment’ operator, &lt;-.\nRun the following code to assign the values 7, 2.5, and \"foo\" to the objects x, y, and z, respectively.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice the lack of printed output. These three commands create three new objects in your environment (x, y, z) that store the assigned data values (7, 2.5, \"foo\"). However, we haven’t yet asked R to do anything with those stored values, so we don’t see any printed output.\nTo view the contents of an object, we can evaluate the object’s name without assignment.\nRun the following code to print the values saved as x and y.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also create new objects by assigning them the values of existing objects.\nRun the following code to create a new object w that takes the value of the existing object z.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#mathematical-operators",
    "href": "sections/1_basic_commands.html#mathematical-operators",
    "title": "Basic Commands",
    "section": "Mathematical Operators",
    "text": "Mathematical Operators\nAll of the familiar arithmetic operators are available in R. When we do arithmetic on named R objects, the values stored in those objects are used to evaluate the expression.\nRun the following code to add, subtract, multiply, and divide the values stored as y and x.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe use the carret character, ^, to specify exponents.\nRun the following code to square and cube the value of y.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe sqrt() function returns the square root of it’s argument (i.e., the value we specify inside the parantheses).\nRun the following code to calculate the square root of y.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFor other roots, we can use fractional exponents.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nR also includes special functions for the most common logarithms as well as the anti-log operator.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that log(y) calculates the natural logarithm of y, \\(\\ln(y)\\). If you want the “ordinary” base-10 log, you need to use the log10() function."
  },
  {
    "objectID": "sections/1_basic_commands.html#practice",
    "href": "sections/1_basic_commands.html#practice",
    "title": "Basic Commands",
    "section": "Practice",
    "text": "Practice\n\nCreate an object called age that takes the value of your age in whole years.\nUse the age object you created in above to create a second object called weeks that takes the value of your age in whole weeks.\n\nAssume 52 weeks in each year.\nDisregard partial years (i.e., assume every year counted in age contains 52 whole weeks).\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#logical-comparisons",
    "href": "sections/1_basic_commands.html#logical-comparisons",
    "title": "Basic Commands",
    "section": "Logical Comparisons",
    "text": "Logical Comparisons\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can negate any logical condition by prepending the ‘!’ character\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRather than negating an equality check, we will typically use the special “not-equal” operator, !=.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can create more complex logical conditions with the AND and OR operators: & and |.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#practice-1",
    "href": "sections/1_basic_commands.html#practice-1",
    "title": "Basic Commands",
    "section": "Practice",
    "text": "Practice\nUse a single line of code to generate a logical value (i.e., TRUE/FALSE) indicating if the value of the ‘weeks’ object you created above is evenly divisible by 7.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#order-of-operations",
    "href": "sections/1_basic_commands.html#order-of-operations",
    "title": "Basic Commands",
    "section": "Order of Operations",
    "text": "Order of Operations\nWhen parsing your commands, R will, mostly, scan each line of code from left to right and apply each mathematical operation according to the usual PEMDAS ordering.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#interacting-with-the-environment",
    "href": "sections/1_basic_commands.html#interacting-with-the-environment",
    "title": "Basic Commands",
    "section": "Interacting with the Environment",
    "text": "Interacting with the Environment\nThe ‘environment’ is a loosely organized set of all the objects that R currently has stored in working memory\nWe can use the ls() function to list the contents of the current environment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe rm() function will remove an object from the environment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/1_basic_commands.html#practice-2",
    "href": "sections/1_basic_commands.html#practice-2",
    "title": "Basic Commands",
    "section": "Practice",
    "text": "Practice\nUse the rm() function to remove the age object that you created above from your environment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  }
]