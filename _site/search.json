[
  {
    "objectID": "sections/2_packages_help.html",
    "href": "sections/2_packages_help.html",
    "title": "first_steps",
    "section": "",
    "text": "When you install R, you’re only installing the core set of functionality. You can already do quite a lot with this baseline R installation (e.g., a complete linear regression analysis), but you will usually need functinality provided by add-on packages to complete most real-world data analyses.\nFor example:\n\nIf your data are incomplete and you want to treat the missing data using multiple imputation, then you will need to install a package like mice, amelia, or mi.\nIf you want to use structural equation modeling to analyze your data, then you will need to install something like lavaan or openmx.\nTo estimate multilevel regression models, you will need lme4.\nFor all but the most trivial data processing, manipulation, and visualization, the tidyverse packages are indespesible (unless you enjoy making your work needlessly more painful).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n## Specify the CRAN mirror a priori\ninstall.packages(c(\"lattice\", \"gridExtra\"),\n                 repos = \"http://cloud.r-project.org\")\n\n## Specify a non-standard directory into which the packages will be installed\ninstall.packages(\"mvtnorm\",\n                 repos = \"http://cloud.r-project.org\",\n                 lib = \"../software\")\n\n## Install from local source\ninstall.packages(\"../software/magrittr_2.0.1.tar.gz\",\n                 repos = NULL,\n                 type = \"Source\")"
  },
  {
    "objectID": "sections/2_packages_help.html#add-on-packages",
    "href": "sections/2_packages_help.html#add-on-packages",
    "title": "first_steps",
    "section": "",
    "text": "When you install R, you’re only installing the core set of functionality. You can already do quite a lot with this baseline R installation (e.g., a complete linear regression analysis), but you will usually need functinality provided by add-on packages to complete most real-world data analyses.\nFor example:\n\nIf your data are incomplete and you want to treat the missing data using multiple imputation, then you will need to install a package like mice, amelia, or mi.\nIf you want to use structural equation modeling to analyze your data, then you will need to install something like lavaan or openmx.\nTo estimate multilevel regression models, you will need lme4.\nFor all but the most trivial data processing, manipulation, and visualization, the tidyverse packages are indespesible (unless you enjoy making your work needlessly more painful).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n## Specify the CRAN mirror a priori\ninstall.packages(c(\"lattice\", \"gridExtra\"),\n                 repos = \"http://cloud.r-project.org\")\n\n## Specify a non-standard directory into which the packages will be installed\ninstall.packages(\"mvtnorm\",\n                 repos = \"http://cloud.r-project.org\",\n                 lib = \"../software\")\n\n## Install from local source\ninstall.packages(\"../software/magrittr_2.0.1.tar.gz\",\n                 repos = NULL,\n                 type = \"Source\")"
  },
  {
    "objectID": "sections/2_packages_help.html#practice",
    "href": "sections/2_packages_help.html#practice",
    "title": "first_steps",
    "section": "Practice",
    "text": "Practice\nUse the install.packages() function to install the following packages in the default location (i.e., don’t specify anything for the ‘lib’ argument).\n\nggplot2\ndplyr\nhaven\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "sections/2_packages_help.html#getting-help",
    "href": "sections/2_packages_help.html#getting-help",
    "title": "first_steps",
    "section": "Getting Help",
    "text": "Getting Help\nEvery R function provided by a Core R package or an add-on package distributed through CRAN must come with documentation (AKA, a help file). This documentation always follows the same general structure. Below, you see the documentation for the if_else() function from the dplyr package.\n\n\n\n\n  \n    R: Vectorised if-else\n    \n    \n    \n    \n    \n    \n  \n\n  \n    \n      \n\n        \n\n\n\nif_else {dplyr}\nR Documentation\n\n\n\n\n\n        Vectorised if-else\n\n        Description\n\n        \n          if_else() is a vectorized if-else. Compared to the base R equivalent,\n          ifelse(), this function allows you to handle missing values in the\n          condition with missing and always takes true, false, and\n          missing into account when determining what the output type should be.\n        \n\n        Usage\n\n        if_else(condition, true, false, missing = NULL, ..., ptype = NULL, size = NULL)\n\n        Arguments\n\n        \n\n\n\n\n\n\n\ncondition\nA logical vector\n\n\ntrue, false\nVectors to use for TRUE and FALSE values of condition.\nBoth true and false will be recycled to the size of condition.\ntrue, false, and missing (if used) will be cast to their common type.\n\n\nmissing\nIf not NULL, will be used as the value for NA values of condition. Follows the same size and type rules as true and false.\n\n\n...\nThese dots are for future extensions and must be empty.\n\n\nptype\nAn optional prototype declaring the desired output type. If supplied, this overrides the common type of true, false, and missing.\n\n\nsize\nAn optional size declaring the desired output size. If supplied, this overrides the size of condition.\n\n\n\n\n\n        Value\n\n        \n          A vector with the same size as condition and the same type as the common type of true,\n          false, and missing.\n        \n        \n          Where condition is TRUE, the matching values from true, where it is\n          FALSE, the matching values from false, and where it is NA, the matching\n          values from missing, if provided, otherwise a missing value will be used.\n        \n\n        Examples\n\n        x &lt;- c(-5:5, NA)\nif_else(x &lt; 0, NA, x)\n\n# Explicitly handle `NA` values in the `condition` with `missing`\nif_else(x &lt; 0, \"negative\", \"positive\", missing = \"missing\")\n\n# Unlike `ifelse()`, `if_else()` preserves types\nx &lt;- factor(sample(letters[1:5], 10, replace = TRUE))\nifelse(x %in% c(\"a\", \"b\", \"c\"), x, NA)\nif_else(x %in% c(\"a\", \"b\", \"c\"), x, NA)\n\n# `if_else()` is often useful for creating new columns inside of `mutate()`\nstarwars %&gt;%\nmutate(category = if_else(height &lt; 100, \"short\", \"tall\"), .keep = \"used\")\n\n      \n    \n  \n\n\n\n\n\nx &lt;- c(-5:5, NA)\nif_else(x &lt; 0, NA, x)\n\n# Explicitly handle `NA` values in the `condition` with `missing`\nif_else(x &lt; 0, \"negative\", \"positive\", missing = \"missing\")\n\n# Unlike `ifelse()`, `if_else()` preserves types\nx &lt;- factor(sample(letters[1:5], 10, replace = TRUE))\nifelse(x %in% c(\"a\", \"b\", \"c\"), x, NA)\nif_else(x %in% c(\"a\", \"b\", \"c\"), x, NA)\n\n# `if_else()` is often useful for creating new columns inside of `mutate()`\nstarwars %&gt;%\n  mutate(category = if_else(height &lt; 100, \"short\", \"tall\"), .keep = \"used\")\n\n\n\n## Prepending the '?' character will access the help file for a function\n?lm\n\n## We can also use the 'help' function\nhelp(lm)\nhelp(\"lm\")\n\n## Non-letter characters need to be quoted\n?/\nhelp(/)\n?\"/\"\nhelp(\"/\")\n\n## If a package is not loaded, we need to specify the namespace\n?quickpred\n?mice::quickpred\nhelp(quickpred, package = \"mice\")\n\n## We can also open an interactive web-based help page\nhelp.start()\n\n################################################################################\n## PRACTICE PROBLEM 1.5\n##\n##  (a) Access the help file for the vector() function.\n##  (b) How many arguments does the vector() function take?\n##\n################################################################################"
  }
]